'use client';

import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import { useDropzone } from 'react-dropzone';
import { 
  Send, 
  Upload, 
  Database, 
  FileText, 
  X, 
  Loader2,
  MessageSquare,
  Bot,
  User,
  Settings,
  Plus,
  ChevronDown
} from 'lucide-react';

const API_BASE_URL = 'http://localhost:8001';

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
}

interface UploadedFile {
  file: File;
  id: string;
}

export default function SQLAgentChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Hello! I\'m your SQL Agent. I can help you analyze data and answer questions about your databases. You can upload Excel/CSV files or ask me questions about existing data.',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [sessionId] = useState(() => `session_${Date.now()}`);
  const [currentDatabase, setCurrentDatabase] = useState('portfoliosql');
  const [availableDatabases, setAvailableDatabases] = useState<string[]>([]);
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const [showUploadArea, setShowUploadArea] = useState(false);
  const [showDatabaseDropdown, setShowDatabaseDropdown] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    fetchAvailableDatabases();
  }, []);

  const fetchAvailableDatabases = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/databases`);
      setAvailableDatabases(response.data.databases);
    } catch (error) {
      console.error('Error fetching databases:', error);
    }
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await axios.post(`${API_BASE_URL}/query`, {
        query: inputValue.trim(),
        user_id: sessionId
      });

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: response.data.response,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error: any) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'system',
        content: `Error: ${error.response?.data?.detail || 'Failed to process query'}`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleDatabaseSwitch = async (newDatabase: string) => {
    if (newDatabase === currentDatabase) {
      setShowDatabaseDropdown(false);
      return;
    }

    try {
      await axios.post(`${API_BASE_URL}/switch-database`, {
        database_name: newDatabase,
        session_id: sessionId
      });

      setCurrentDatabase(newDatabase);
      setShowDatabaseDropdown(false);

      const systemMessage: Message = {
        id: Date.now().toString(),
        role: 'system',
        content: `Switched to database: ${newDatabase}`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, systemMessage]);
    } catch (error: any) {
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: 'system',
        content: `Failed to switch database: ${error.response?.data?.detail || 'Unknown error'}`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const onDrop = (acceptedFiles: File[]) => {
    const newFiles = acceptedFiles.map(file => ({
      file,
      id: `${Date.now()}_${Math.random()}`
    }));
    setUploadedFiles(prev => [...prev, ...newFiles]);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],
      'application/vnd.ms-excel': ['.xls'],
      'text/csv': ['.csv']
    },
    multiple: true
  });

  const removeFile = (fileId: string) => {
    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));
  };

  const handleFileUpload = async () => {
    if (uploadedFiles.length === 0 || isUploading) return;

    setIsUploading(true);
    const formData = new FormData();
    
    uploadedFiles.forEach(({ file }) => {
      formData.append('files', file);
    });
    formData.append('database_name', currentDatabase);

    try {
      const response = await axios.post(`${API_BASE_URL}/upload-files`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });

      const systemMessage: Message = {
        id: Date.now().toString(),
        role: 'system',
        content: `✅ ${response.data.message}\nTables created: ${response.data.tables_created?.join(', ') || 'None'}`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, systemMessage]);
      setUploadedFiles([]);
      setShowUploadArea(false);
    } catch (error: any) {
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: 'system',
        content: `❌ Upload failed: ${error.response?.data?.detail || 'Unknown error'}`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsUploading(false);
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: false 
    });
  };

  return (
    <div className="flex flex-col h-screen bg-white">
      {/* Header */}
      <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-black rounded-full flex items-center justify-center">
            <Bot className="w-5 h-5 text-white" />
          </div>
          <div>
            <h1 className="text-xl font-semibold text-gray-900">SQL Agent</h1>
            <p className="text-sm text-gray-500">Conversational Database Assistant</p>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          {/* Database Selector */}
          <div className="relative">
            <button
              onClick={() => setShowDatabaseDropdown(!showDatabaseDropdown)}
              className="flex items-center space-x-2 px-3 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg border border-gray-200 transition-colors"
            >
              <Database className="w-4 h-4 text-gray-600" />
              <span className="text-sm font-medium text-gray-700">{currentDatabase}</span>
              <ChevronDown className="w-4 h-4 text-gray-500" />
            </button>
            
            {showDatabaseDropdown && (
              <div className="absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                {availableDatabases.map((db) => (
                  <button
                    key={db}
                    onClick={() => handleDatabaseSwitch(db)}
                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 first:rounded-t-lg last:rounded-b-lg transition-colors ${
                      db === currentDatabase ? 'bg-gray-50 text-gray-900 font-medium' : 'text-gray-700'
                    }`}
                  >
                    {db}
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Upload Toggle */}
          <button
            onClick={() => setShowUploadArea(!showUploadArea)}
            className={`p-2 rounded-lg border transition-colors ${
              showUploadArea 
                ? 'bg-gray-900 text-white border-gray-900' 
                : 'bg-white text-gray-600 border-gray-200 hover:bg-gray-50'
            }`}
          >
            <Upload className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Upload Area */}
      {showUploadArea && (
        <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
          <div
            {...getRootProps()}
            className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer ${
              isDragActive 
                ? 'border-gray-400 bg-gray-100' 
                : 'border-gray-300 hover:border-gray-400 hover:bg-gray-100'
            }`}
          >
            <input {...getInputProps()} />
            <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
            <p className="text-sm text-gray-600 mb-1">
              {isDragActive ? 'Drop files here...' : 'Drag & drop Excel/CSV files here'}
            </p>
            <p className="text-xs text-gray-500">or click to select files</p>
          </div>

          {uploadedFiles.length > 0 && (
            <div className="mt-4 space-y-2">
              <h4 className="text-sm font-medium text-gray-700">Selected Files:</h4>
              {uploadedFiles.map(({ file, id }) => (
                <div key={id} className="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200">
                  <div className="flex items-center space-x-3">
                    <FileText className="w-4 h-4 text-gray-500" />
                    <div>
                      <p className="text-sm font-medium text-gray-900">{file.name}</p>
                      <p className="text-xs text-gray-500">{(file.size / 1024).toFixed(1)} KB</p>
                    </div>
                  </div>
                  <button
                    onClick={() => removeFile(id)}
                    className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              ))}
              <button
                onClick={handleFileUpload}
                disabled={isUploading}
                className="w-full mt-3 px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center space-x-2"
              >
                {isUploading ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span>Uploading...</span>
                  </>
                ) : (
                  <>
                    <Upload className="w-4 h-4" />
                    <span>Upload Files</span>
                  </>
                )}
              </button>
            </div>
          )}
        </div>
      )}

      {/* Messages */}
      <div className="flex-1 overflow-y-auto px-6 py-4">
        <div className="max-w-4xl mx-auto space-y-6">
          {messages.map((message) => (
            <div key={message.id} className="flex space-x-4">
              {/* Avatar */}
              <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                message.role === 'user' 
                  ? 'bg-gray-900' 
                  : message.role === 'assistant'
                  ? 'bg-gray-100 border border-gray-200'
                  : 'bg-yellow-100 border border-yellow-200'
              }`}>
                {message.role === 'user' ? (
                  <User className="w-4 h-4 text-white" />
                ) : message.role === 'assistant' ? (
                  <Bot className="w-4 h-4 text-gray-600" />
                ) : (
                  <Settings className="w-4 h-4 text-yellow-600" />
                )}
              </div>

              {/* Message Content */}
              <div className="flex-1 min-w-0">
                <div className="flex items-center space-x-2 mb-1">
                  <span className="text-sm font-medium text-gray-900">
                    {message.role === 'user' ? 'You' : message.role === 'assistant' ? 'SQL Agent' : 'System'}
                  </span>
                  <span className="text-xs text-gray-500">{formatTime(message.timestamp)}</span>
                </div>
                <div className={`prose prose-sm max-w-none ${
                  message.role === 'system' ? 'text-yellow-800' : 'text-gray-700'
                }`}>
                  <pre className="whitespace-pre-wrap font-sans">{message.content}</pre>
                </div>
              </div>
            </div>
          ))}

          {isLoading && (
            <div className="flex space-x-4">
              <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-100 border border-gray-200 flex items-center justify-center">
                <Bot className="w-4 h-4 text-gray-600" />
              </div>
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-1">
                  <span className="text-sm font-medium text-gray-900">SQL Agent</span>
                  <span className="text-xs text-gray-500">thinking...</span>
                </div>
                <div className="flex items-center space-x-2 text-gray-500">
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span className="text-sm">Processing your query...</span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input Area */}
      <div className="border-t border-gray-200 bg-white px-6 py-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-end space-x-3">
            <div className="flex-1 relative">
              <textarea
                ref={textareaRef}
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Ask me anything about your data..."
                className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-transparent transition-all"
                rows={1}
                style={{ minHeight: '48px', maxHeight: '120px' }}
                onInput={(e) => {
                  const target = e.target as HTMLTextAreaElement;
                  target.style.height = 'auto';
                  target.style.height = `${Math.min(target.scrollHeight, 120)}px`;
                }}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isLoading}
                className="absolute right-2 bottom-2 p-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Send className="w-4 h-4" />
              </button>
            </div>
          </div>
          <p className="text-xs text-gray-500 mt-2 text-center">
            Press Enter to send, Shift+Enter for new line
          </p>
        </div>
      </div>
    </div>
  );
}
